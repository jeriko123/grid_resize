{"version":3,"sources":["logo.svg","main/Main.js","Table/Table.js","Table/TableComponent.js","App.js","Grid/Grid.js","router.js","core.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","useState","count","setCount","console","log","useEffect","document","title","className","onClick","to","MyTable","tableData","setTableData","edit","setEdit","table","Object","values","data","rowEdit","id","key","value","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","component","scope","TextField","onChange","e","target","name","t_max","t_min","window","TableComponent","CL","F","SO4","App","src","logo","alt","Grid","useResizeAware","resizeListener","sizes","useResizeObserver","ref","width","height","leftMenu","setLeftMenu","leftStyle","resize","overflow","maxWidth","minWidth","handleLeftMenu","class","style","Router","exact","path","Core","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb58d694.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction Main(props) {\r\n  const [count, setCount] = useState(0);\r\n  console.log(\"count\", count);\r\n\r\n  useEffect(() => {\r\n    document.title = `You clicked ${count} times`;\r\n  });\r\n\r\n  const goTable = () => props.history.push(\"table\");\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      <div>\r\n        <p>You clicked {count} times</p>\r\n        <button onClick={() => setCount(count + 1)}>Click me</button>\r\n        <Link to=\"/table\">\r\n          <button onClick={() => {}}>Table</button>\r\n        </Link>\r\n        <Link to=\"/grid\">\r\n          <button onClick={() => {}}>Grid</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Paper, IconButton } from \"@material-ui/core\";\r\nimport * as R from \"ramda\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction MyTable(props) {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [edit, setEdit] = useState(false);\r\n  useEffect(() => {\r\n    const table = Object.values(props.data);\r\n    setTableData(table);\r\n  }, [props.data]);\r\n\r\n  const editClick = () => {\r\n    setEdit(!edit);\r\n  };\r\n\r\n  const rowEdit = (id) => (key) => (value) => {\r\n    const values = [...tableData];\r\n    values[id][key] = value;\r\n    setTableData(values);\r\n  };\r\n  console.log(tableData);\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      <Link to=\"/\">\r\n        <button>Главная</button>\r\n      </Link>\r\n      <div>Table</div>\r\n\r\n      <button onClick={editClick}>\r\n        {edit ? \"применить\" : \"редактировать\"}\r\n      </button>\r\n\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell align=\"right\">t_max</TableCell>\r\n            <TableCell align=\"right\">t_min</TableCell>\r\n            <TableCell align=\"right\">window</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {tableData.map((row, id) => (\r\n            <TableRow key={id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {edit && (\r\n                  <TextField\r\n                    onChange={(e) => rowEdit(id)(\"name\")(e.target.value)}\r\n                    value={tableData[id][\"name\"]}\r\n                  />\r\n                )}\r\n                {!edit && row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {edit && (\r\n                  <TextField\r\n                    onChange={(e) => rowEdit(id)(\"t_max\")(e.target.value)}\r\n                    value={tableData[id][\"t_max\"]}\r\n                  />\r\n                )}\r\n                {!edit && row.t_max}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {edit && (\r\n                  <TextField\r\n                    onChange={(e) => rowEdit(id)(\"t_min\")(e.target.value)}\r\n                    value={tableData[id][\"t_min\"]}\r\n                  />\r\n                )}\r\n                {!edit && row.t_min}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {edit && (\r\n                  <TextField\r\n                    onChange={(e) => rowEdit(id)(\"window\")(e.target.value)}\r\n                    value={tableData[id][\"window\"]}\r\n                  />\r\n                )}\r\n                {!edit && row.window}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as R from \"ramda\";\r\nimport MyTable from './Table';\r\n\r\n\r\nfunction TableComponent(props) {\r\n  \r\n    const data = {\r\n        CL: {\r\n          name: \"CL\",\r\n          window: 20,\r\n          t_max: 14,\r\n          t_min: 20,\r\n        },\r\n        F: {\r\n          name: \"F\",\r\n          window: 32,\r\n          t_max: 3,\r\n          t_min: 123,\r\n        },\r\n        SO4: {\r\n          name: \"SO4\",\r\n          window: 3,\r\n          t_max: 14,\r\n          t_min: 353,\r\n        },\r\n      };\r\n\r\n\r\n  return (\r\n   <MyTable data={data} />\r\n  );\r\n}\r\n\r\nexport default TableComponent;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Main from \"./main/Main\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        Learn React\n      </header>\n      <Main props={{ ...props }} />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Grid.css\";\r\nimport useResizeAware from \"react-resize-aware\";\r\nimport useResizeObserver from \"use-resize-observer\";\r\n\r\nconst Grid = (props) => {\r\n  const [resizeListener, sizes] = useResizeAware();\r\n  const { ref, width = 20, height = sizes.height } = useResizeObserver();\r\n\r\n  const [leftMenu, setLeftMenu] = useState(true);\r\n\r\n  const leftStyle = {\r\n    resize: \"horizontal\",\r\n    overflow: \"auto\",\r\n\r\n    maxWidth: sizes.width - 150,\r\n    minWidth: 200,\r\n  };\r\n\r\n//   const mainStyle = {\r\n//     width: sizes.width - width - 200,\r\n//   };\r\n\r\n  const handleLeftMenu = () => {\r\n    setLeftMenu(!leftMenu);\r\n  };\r\n\r\n  return (\r\n    <div class=\"grid-container\">\r\n      {leftMenu && (\r\n        <div class=\"left-menu\" ref={ref} style={leftStyle}>\r\n          {resizeListener}\r\n          <Link to=\"/\">\r\n            <button onClick={() => {}}>main</button>\r\n          </Link>\r\n          <div>\r\n            <button onClick={() => {}}>Resize</button>\r\n          </div>\r\n          <div>\r\n            <button onClick={handleLeftMenu}>Handle</button>\r\n          </div>\r\n          Left Your content here. Size: {width}x{height})\r\n        </div>\r\n      )}\r\n      <div class=\"main-menu\" >\r\n        main\r\n        <div>\r\n          <button onClick={handleLeftMenu}>Handle</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"right-menu\">rights</div>\r\n      <div class=\"console\">console</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport Main from \"./main/Main\";\r\nimport TableComponent from \"./Table/TableComponent\";\r\nimport App from \"./App\";\r\nimport Grid from \"./Grid/Grid\";\r\n\r\nconst Router = (props) => {\r\n  return (\r\n    <HashRouter>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route exact path=\"/table\" component={TableComponent} />\r\n      <Route exact path=\"/grid\" component={Grid} />\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\r\nimport Router from './router';\r\n\r\nfunction Core() {\r\n  return (\r\n    <div >\r\n      <Router />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Core;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Core from './core';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Core />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}